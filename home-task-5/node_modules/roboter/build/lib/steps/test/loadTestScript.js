import path from 'path';
const loadTestScript = async function ({ absolutePotentialScriptFiles }) {
    for (const absolutePotentialScriptFile of absolutePotentialScriptFiles) {
        try {
            const module = await import(`file://${absolutePotentialScriptFile}`);
            let setupFunction = module.default;
            if (setupFunction.default) {
                setupFunction = setupFunction.default;
            }
            return setupFunction;
        }
        catch {
            // Ignore potential files that don't exist.
        }
    }
    return undefined;
};
const loadGlobalPreScript = async function ({ applicationRoot }) {
    const absolutePotentialScriptFiles = [
        path.join(applicationRoot, 'test', 'pre.ts'),
        path.join(applicationRoot, 'test', 'pre.js')
    ];
    return loadTestScript({ absolutePotentialScriptFiles });
};
const loadGlobalPostScript = async function ({ applicationRoot }) {
    const absolutePotentialScriptFiles = [
        path.join(applicationRoot, 'test', 'post.ts'),
        path.join(applicationRoot, 'test', 'post.js')
    ];
    return await loadTestScript({ absolutePotentialScriptFiles });
};
const loadTestTypePreScript = async function ({ applicationRoot, testType }) {
    const absolutePotentialScriptFiles = [
        path.join(applicationRoot, 'test', testType, 'pre.ts'),
        path.join(applicationRoot, 'test', testType, 'pre.js')
    ];
    return loadTestScript({ absolutePotentialScriptFiles });
};
const loadTestTypePostScript = async function ({ applicationRoot, testType }) {
    const absolutePotentialScriptFiles = [
        path.join(applicationRoot, 'test', testType, 'post.ts'),
        path.join(applicationRoot, 'test', testType, 'post.js')
    ];
    return loadTestScript({ absolutePotentialScriptFiles });
};
export { loadGlobalPreScript, loadGlobalPostScript, loadTestTypePreScript, loadTestTypePostScript };
