import { getAbsoluteDependencyDirectoryList } from '../../utils/getDependencyList';
import { getLicense } from './getLicense';
import { getPackageJson } from '../../utils/getPackageJson';
import { isCustomError } from 'defekt';
import satisfies from 'spdx-satisfies';
import * as errors from '../../errors';
const findIncompatiblePackages = async function ({ licenseCheckConfiguration, absoluteDirectory }) {
    const absoluteDependencyDirectories = await getAbsoluteDependencyDirectoryList({
        absoluteDirectory
    });
    const incompatiblePackages = [];
    for (const absoluteDependencyDirectory of absoluteDependencyDirectories) {
        // It should not be possible that a dependency has no package.json
        const packageJson = (await getPackageJson({
            absoluteDirectory: absoluteDependencyDirectory
        })).unwrapOrThrow();
        const getLicenseResult = await getLicense({
            absoluteDirectory: absoluteDependencyDirectory,
            licenseCheckConfiguration
        });
        if (getLicenseResult.hasError()) {
            if (isCustomError(getLicenseResult.error, errors.LicenseNotSupported)) {
                incompatiblePackages.push({
                    name: packageJson.name,
                    directory: absoluteDependencyDirectory,
                    license: getLicenseResult.error.data.license,
                    version: packageJson.version
                });
            }
            if (isCustomError(getLicenseResult.error, errors.LicenseNotFound)) {
                incompatiblePackages.push({
                    name: packageJson.name,
                    directory: absoluteDependencyDirectory,
                    license: 'unknown',
                    version: packageJson.version
                });
            }
            continue;
        }
        const packageLicense = getLicenseResult.value;
        const packageVersion = packageJson.version;
        if (licenseCheckConfiguration.compatibleLicenses.some((license) => satisfies(license, packageLicense))) {
            continue;
        }
        incompatiblePackages.push({
            name: packageJson.name,
            version: packageVersion,
            license: packageLicense,
            directory: absoluteDependencyDirectory
        });
    }
    return incompatiblePackages;
};
export { findIncompatiblePackages };
