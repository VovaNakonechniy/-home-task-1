import fs from 'fs';
import path from 'path';
import { error, value } from 'defekt';
import * as errors from '../errors';
const isErrnoException = function (err) {
    return typeof err === 'object' && err !== null && 'code' in err;
};
const getApplicationRoot = async function ({ directory }) {
    try {
        await fs.promises.access(directory, fs.constants.R_OK);
    }
    catch (ex) {
        if (isErrnoException(ex) && ex.code === 'ENOENT') {
            return error(new errors.DirectoryNotFound());
        }
        throw ex;
    }
    const packageJsonPath = path.join(directory, 'package.json');
    try {
        await fs.promises.access(packageJsonPath, fs.constants.R_OK);
    }
    catch (ex) {
        if (isErrnoException(ex) && ex.code === 'ENOENT') {
            const upperDirectory = path.join(directory, '..');
            if (upperDirectory === directory) {
                return error(new errors.ApplicationNotFound());
            }
            return await getApplicationRoot({ directory: upperDirectory });
        }
        throw ex;
    }
    return value(directory);
};
export { getApplicationRoot };
