import { buntstift } from 'buntstift';
import { processenv } from 'processenv';
import shelljs from 'shelljs';
import { error, value } from 'defekt';
import * as errors from '../errors.js';
const runCommand = async function (command, options = {}) {
    const cwd = options.cwd ?? process.cwd(), env = options.env ?? processenv(), maxBuffer = options.maxBuffer ?? 1_024 * 200, silent = options.silent ?? false;
    return new Promise((resolve, reject) => {
        try {
            const childProcess = shelljs.exec(command, { cwd, env, maxBuffer, silent: true }, (exitCode, stdout, stderr) => {
                if (exitCode !== 0) {
                    const ex = new errors.ExecutableFailed(stderr, command, exitCode, stdout, stderr);
                    return resolve(error(ex));
                }
                resolve(value({ exitCode, stdout, stderr }));
            });
            if (!silent) {
                childProcess.stdout?.on('data', (data) => {
                    buntstift.raw(`  ${data}`);
                });
                childProcess.stderr?.on('data', (data) => {
                    buntstift.raw(`  ${data}`, { target: 'stderr' });
                });
            }
        }
        catch (ex) {
            reject(ex);
        }
    });
};
export { runCommand };
