import { Result } from 'defekt';
import * as errors from '../errors';
declare class DependencyGraph {
    protected roots: Set<string>;
    protected edges: Map<string, Set<string>>;
    protected backEdges: Map<string, Set<string>>;
    constructor();
    addRoot(filePath: string): Result<undefined, errors.RootAlreadyInGraph>;
    removeRoot(filePath: string): Result<undefined, errors.RootNotInGraph>;
    hasRoot(filePath: string): boolean;
    addEdge(source: string, target: string): Result<undefined, errors.SourceNodeNotInGraph | errors.EdgeAlreadyInGraph>;
    updateEdgesFromNode(source: string, targets: Set<string>): Result<undefined, errors.SourceNodeNotInGraph>;
    removeEdge(source: string, target: string): Result<undefined, errors.EdgeNotInGraph>;
    removeNode(filePath: string): Result<undefined, errors.CannotImplicitlyRemoveRoots | errors.NodeNotInGraph>;
    hasNode(filePath: string): boolean;
    findRoots(filePath: string): Result<Set<string>, errors.NodeNotInGraph>;
    prettyPrint(): string;
}
export { DependencyGraph };
