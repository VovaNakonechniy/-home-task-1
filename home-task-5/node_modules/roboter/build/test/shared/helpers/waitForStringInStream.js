import * as testErrors from './errors';
const waitForStringInStream = async function ({ stream, string, timeout }) {
    let accumulator = '';
    const startTime = Date.now();
    const accumulateChunks = (chunk) => {
        accumulator += chunk;
    };
    stream.on('data', accumulateChunks);
    await new Promise((resolve, reject) => {
        const resolveWhenAccumulatorContainsString = () => {
            if (accumulator.includes(string)) {
                stream.off('data', resolveWhenAccumulatorContainsString);
                stream.off('data', accumulateChunks);
                resolve();
            }
            if (timeout && Date.now() - startTime > timeout) {
                stream.off('data', resolveWhenAccumulatorContainsString);
                stream.off('data', accumulateChunks);
                reject(new testErrors.WaitForStringInStreamTimeout());
            }
        };
        stream.on('data', resolveWhenAccumulatorContainsString);
    });
};
export { waitForStringInStream };
