import { ColorLevel } from './ColorLevel';
import { Configuration } from './Configuration';
import { ListOptions } from './ListOptions';
import { Message } from './Message';
import { MessageType } from './MessageType';
import { ModeOptions } from './ModeOptions';
import { PrefixOptions } from './PrefixOptions';
import { RawOptions } from './RawOptions';
import { TableOptions } from './TableOptions';
declare class Buntstift {
    private configuration;
    private static readonly detectedColorLevel;
    private static spinner;
    constructor();
    protected getPrefix(messageType: MessageType, modeOptions?: ModeOptions): string;
    protected isInteractiveSession(modeOptions?: ModeOptions): boolean;
    protected isQuietModeEnabled(modeOptions?: ModeOptions): boolean;
    protected isUtf8Enabled(modeOptions?: ModeOptions): boolean;
    protected isVerboseModeEnabled(modeOptions?: ModeOptions): boolean;
    protected static pauseSpinner(): () => void;
    configure(configuration: Configuration): void;
    getConfiguration(): Configuration;
    wait(options?: ModeOptions): () => void;
    error(message: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    warn(message: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    success(message: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    info(message: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    verbose(message: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    line(options?: ModeOptions): Buntstift;
    header(headline: Message, options?: PrefixOptions & ModeOptions): Buntstift;
    newLine(options?: ModeOptions): Buntstift;
    list(message: Message, options?: PrefixOptions & ModeOptions & ListOptions): Buntstift;
    table(items: Record<string, Message>[], options?: ModeOptions & TableOptions): Buntstift;
    raw(message: Message, options?: RawOptions): Buntstift;
    ask(question: string, options?: RegExp | string | {
        default?: string;
        mask?: RegExp;
        echo?: boolean;
    }): Promise<string>;
    confirm(message: string, value?: boolean): Promise<boolean>;
    select(question: string, choices: string[]): Promise<string>;
}
declare const buntstift: Buntstift;
export { buntstift, ColorLevel };
