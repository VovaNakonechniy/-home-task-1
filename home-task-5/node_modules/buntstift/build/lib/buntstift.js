"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorLevel = exports.buntstift = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ColorLevel_1 = require("./ColorLevel");
Object.defineProperty(exports, "ColorLevel", { enumerable: true, get: function () { return ColorLevel_1.ColorLevel; } });
const Configuration_1 = require("./Configuration");
const humanize_string_1 = __importDefault(require("humanize-string"));
const inquirer_1 = __importDefault(require("inquirer"));
const noop_1 = require("./noop");
const ora_1 = __importDefault(require("ora"));
class Buntstift {
    constructor() {
        this.configuration = new Configuration_1.Configuration({
            colorLevel: Buntstift.detectedColorLevel,
            isInteractiveSession: process.stdout.isTTY,
            isQuietModeEnabled: false,
            isUtf8Enabled: true,
            isVerboseModeEnabled: false
        });
    }
    getPrefix(messageType, modeOptions) {
        switch (messageType) {
            case 'error':
                return this.isUtf8Enabled(modeOptions) ? '\u2717' : '!';
            case 'warn':
                return this.isUtf8Enabled(modeOptions) ? '\u25BB' : '>';
            case 'success':
                return this.isUtf8Enabled(modeOptions) ? '\u2713' : '+';
            case 'info':
                return ' ';
            case 'verbose':
                return ' ';
            case 'header':
                return this.isUtf8Enabled(modeOptions) ? '\u25BB' : '>';
            case 'list':
                return this.isUtf8Enabled(modeOptions) ? '\u2219' : '-';
            default:
                throw new Error('Invalid operation.');
        }
    }
    isInteractiveSession(modeOptions) {
        var _a;
        return (_a = modeOptions === null || modeOptions === void 0 ? void 0 : modeOptions.isInteractiveSession) !== null && _a !== void 0 ? _a : this.configuration.isInteractiveSession;
    }
    isQuietModeEnabled(modeOptions) {
        var _a;
        return (_a = modeOptions === null || modeOptions === void 0 ? void 0 : modeOptions.isQuietModeEnabled) !== null && _a !== void 0 ? _a : this.configuration.isQuietModeEnabled;
    }
    isUtf8Enabled(modeOptions) {
        var _a;
        return (_a = modeOptions === null || modeOptions === void 0 ? void 0 : modeOptions.isUtf8Enabled) !== null && _a !== void 0 ? _a : this.configuration.isUtf8Enabled;
    }
    isVerboseModeEnabled(modeOptions) {
        var _a;
        return (_a = modeOptions === null || modeOptions === void 0 ? void 0 : modeOptions.isVerboseModeEnabled) !== null && _a !== void 0 ? _a : this.configuration.isVerboseModeEnabled;
    }
    static pauseSpinner() {
        if (!Buntstift.spinner.isSpinning) {
            return noop_1.noop;
        }
        Buntstift.spinner.stop();
        const resume = () => {
            Buntstift.spinner.start();
        };
        return resume;
    }
    configure(configuration) {
        this.configuration = configuration;
        chalk_1.default.level = this.configuration.colorLevel;
        if (this.configuration.isUtf8Enabled) {
            Buntstift.spinner.spinner = 'dots';
        }
        else {
            Buntstift.spinner.spinner = 'line';
        }
    }
    getConfiguration() {
        return this.configuration.clone();
    }
    wait(options) {
        if (this.isQuietModeEnabled(options) || !this.isInteractiveSession(options)) {
            return noop_1.noop;
        }
        Buntstift.spinner.start();
        const stop = () => {
            Buntstift.spinner.stop();
        };
        return stop;
    }
    error(message, options) {
        var _a;
        const resumeSpinner = Buntstift.pauseSpinner();
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('error', options);
        console.error(chalk_1.default.red.bold(`${prefix} ${String(message)}`));
        resumeSpinner();
        return this;
    }
    warn(message, options) {
        var _a;
        const resumeSpinner = Buntstift.pauseSpinner();
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('warn', options);
        console.error(chalk_1.default.yellow.bold(`${prefix} ${String(message)}`));
        resumeSpinner();
        return this;
    }
    success(message, options) {
        var _a;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const resumeSpinner = Buntstift.pauseSpinner();
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('success', options);
        console.log(chalk_1.default.green.bold(`${prefix} ${String(message)}`));
        resumeSpinner();
        return this;
    }
    info(message, options) {
        var _a;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const resumeSpinner = Buntstift.pauseSpinner();
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('info', options);
        console.log(chalk_1.default.white(`${prefix} ${String(message)}`));
        resumeSpinner();
        return this;
    }
    verbose(message, options) {
        var _a;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        if (!this.isVerboseModeEnabled(options)) {
            return this;
        }
        const resumeSpinner = Buntstift.pauseSpinner();
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('verbose', options);
        console.log(chalk_1.default.gray(`${prefix} ${String(message)}`));
        resumeSpinner();
        return this;
    }
    line(options) {
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const resumeSpinner = Buntstift.pauseSpinner();
        const dash = this.configuration.isUtf8Enabled ? '\u2500' : '-';
        console.log(chalk_1.default.gray(dash.repeat(process.stdout.columns || 80)));
        resumeSpinner();
        return this;
    }
    header(headline, options) {
        var _a;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('header', options);
        this.line(options);
        this.info(headline, { ...options, prefix });
        this.line(options);
        return this;
    }
    newLine(options) {
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const resumeSpinner = Buntstift.pauseSpinner();
        console.log();
        resumeSpinner();
        return this;
    }
    list(message, options) {
        var _a, _b;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const prefix = (_a = options === null || options === void 0 ? void 0 : options.prefix) !== null && _a !== void 0 ? _a : this.getPrefix('list', options);
        const level = (_b = options === null || options === void 0 ? void 0 : options.level) !== null && _b !== void 0 ? _b : 0;
        const indent = (prefix.length + 1) * level;
        const indentedPrefix = `${' '.repeat(indent)}${prefix}`;
        this.info(message, { ...options, prefix: indentedPrefix });
        return this;
    }
    table(items, options) {
        var _a;
        if (this.isQuietModeEnabled(options)) {
            return this;
        }
        const showHeader = (_a = options === null || options === void 0 ? void 0 : options.showHeader) !== null && _a !== void 0 ? _a : true;
        const columns = {};
        for (const columnName of Object.keys(items[0])) {
            const title = humanize_string_1.default(columnName);
            columns[columnName] = { title, width: showHeader ? title.length : 0 };
        }
        for (const item of items) {
            for (const [columnName, value] of Object.entries(item)) {
                const lengthValue = String(value).length;
                if (lengthValue > columns[columnName].width) {
                    columns[columnName].width = lengthValue;
                }
            }
        }
        if (showHeader) {
            const headerData = [];
            for (const column of Object.values(columns)) {
                headerData.push(column.title.padEnd(column.width));
            }
            const header = headerData.join('  ');
            this.info(header, options);
            const dash = this.isUtf8Enabled(options) ? '\u2500' : '-';
            const separatorData = [];
            for (const column of Object.values(columns)) {
                separatorData.push(dash.repeat(column.width));
            }
            const separator = separatorData.join('  ');
            this.info(separator, options);
        }
        for (const item of items) {
            const data = [];
            for (const [key, value] of Object.entries(item)) {
                if (typeof value === 'number') {
                    data.push(String(value).padStart(columns[key].width));
                }
                else {
                    data.push(String(value).padEnd(columns[key].width));
                }
            }
            const line = data.join('  ');
            this.info(line, options);
        }
        return this;
    }
    raw(message, options) {
        var _a;
        const resumeSpinner = Buntstift.pauseSpinner();
        const target = (_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : 'stdout';
        process[target].write(String(message));
        resumeSpinner();
        return this;
    }
    /* eslint-disable class-methods-use-this */
    async ask(question, options) {
        var _a;
        const resumeSpinner = Buntstift.pauseSpinner();
        let defaultValue, echo, mask;
        if (options instanceof RegExp) {
            defaultValue = undefined;
            echo = true;
            mask = options;
        }
        else if (typeof options === 'string') {
            defaultValue = options;
            echo = true;
            mask = undefined;
        }
        else {
            defaultValue = options === null || options === void 0 ? void 0 : options.default;
            echo = (_a = options === null || options === void 0 ? void 0 : options.echo) !== null && _a !== void 0 ? _a : true;
            mask = options === null || options === void 0 ? void 0 : options.mask;
        }
        const { answer } = await inquirer_1.default.prompt([
            {
                type: echo ? 'input' : 'password',
                name: 'answer',
                message: question,
                default: defaultValue,
                validate(value) {
                    if (mask && !mask.test(value)) {
                        return 'Malformed input, please retry.';
                    }
                    return true;
                }
            }
        ]);
        resumeSpinner();
        return answer;
    }
    /* eslint-enable class-methods-use-this */
    /* eslint-disable class-methods-use-this */
    async confirm(message, value = true) {
        const resumeSpinner = Buntstift.pauseSpinner();
        const { isConfirmed } = await inquirer_1.default.prompt([
            {
                type: 'confirm',
                name: 'isConfirmed',
                message,
                default: value
            }
        ]);
        resumeSpinner();
        return isConfirmed;
    }
    /* eslint-enable class-methods-use-this */
    /* eslint-disable class-methods-use-this */
    async select(question, choices) {
        const resumeSpinner = Buntstift.pauseSpinner();
        const { selection } = await inquirer_1.default.prompt([
            {
                type: 'list',
                name: 'selection',
                message: question,
                choices
            }
        ]);
        resumeSpinner();
        return selection;
    }
}
Buntstift.detectedColorLevel = chalk_1.default.level;
Buntstift.spinner = ora_1.default({
    color: 'white',
    spinner: 'dots',
    isEnabled: true
});
const buntstift = new Buntstift();
exports.buntstift = buntstift;
