"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryType = exports.walk = void 0;
const EntryType_1 = require("./types/EntryType");
Object.defineProperty(exports, "EntryType", { enumerable: true, get: function () { return EntryType_1.EntryType; } });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const queue_1 = require("./queue");
const resolveSymlink_1 = require("./resolveSymlink");
const errors = __importStar(require("./errors"));
const alwaysTrue = function () {
    return true;
};
const alwaysFalse = function () {
    return false;
};
const walk = async function* ({ directory, yields = [EntryType_1.EntryType.files, EntryType_1.EntryType.directories], matches = alwaysTrue, ignores = alwaysFalse, followsSymlinks = false, maximumDepth = Number.POSITIVE_INFINITY }) {
    if (!path_1.default.isAbsolute(directory)) {
        throw new errors.RelativePathsAreUnsupported({ data: { directory } });
    }
    const paths = new queue_1.Queue({ path: directory, depth: 0 });
    const visisitedPaths = new Set();
    while (!paths.isEmpty()) {
        const { path, depth } = paths.pop().unwrapOrThrow();
        if (depth > maximumDepth) {
            continue;
        }
        const lstatResult = await fs_1.default.promises.lstat(path);
        const isSymbolicLink = lstatResult.isSymbolicLink();
        const realPath = isSymbolicLink ? await resolveSymlink_1.resolveSymlink(path) : path;
        if (visisitedPaths.has(realPath)) {
            continue;
        }
        const statResult = await fs_1.default.promises.stat(realPath);
        const isDirectory = statResult.isDirectory();
        const isFile = statResult.isFile();
        if (isSymbolicLink && !followsSymlinks) {
            continue;
        }
        if (matches(realPath) && !ignores(realPath)) {
            if (isFile && yields.includes(EntryType_1.EntryType.files)) {
                yield realPath;
            }
            if (isDirectory && yields.includes(EntryType_1.EntryType.directories)) {
                yield realPath;
            }
        }
        if (isDirectory) {
            paths.push(...(await fs_1.default.promises.readdir(realPath)).map((child) => ({
                path: path_1.default.join(realPath, child),
                depth: depth + 1
            })));
        }
        visisitedPaths.add(realPath);
    }
};
exports.walk = walk;
